pragma solidity >=0.7.0< 0.9.0; // solidity version

contract SafeMathLibrary // SafeMathLibrary Contract 
{
    
   function add(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function sub(uint a, uint b) public pure returns (uint c) {
        require(b <= a); c = a - b; 
        
    } 
 
}

contract ManikantaToken is  SafeMathLibrary // ManikantaToken contract Inherits All The Functions , Variable from the My_ERC20_Interface contract and SafeMathLibrary contract
{

    string public Token_Name;
    string public Token_Symbol;
    uint8 public decimals; // 18 decimals is the  suggested default, dont change it
    mapping(address => uint) public balances; 
    mapping(address=> mapping (address => uint)) public allowed;
    address TokenOwner_1;

    event Approval(address  tokenOwner, address  spender,uint tokens);
    event Transfer(address  from, address  to,uint tokens);


   constructor() {
     Token_Name = "ManikantaToken";
     Token_Symbol= "MTK";
     decimals = 18;
   }

   function SendingTokensToYourOwnAccount(address TokenOwner ,uint TotalNoOfTokens) public
   {
       require(TokenOwner == msg.sender , "Only Owner can send tokens to their account" );
       balances[TokenOwner]+=TotalNoOfTokens;
   }

   function BurningTokensFromYourOwnAccount(address TokenOwner , uint TotalNoOfTokensToBeRemoved) public 
   {
       require(TokenOwner == msg.sender , "Only Owner can take the tokens to their account" );
       require(TotalNoOfTokensToBeRemoved<=balances[TokenOwner],"There are not enough Tokens To Burn Out From Your Account");
       balances[TokenOwner]-=TotalNoOfTokensToBeRemoved;
   }

   function TotalSupply() public view returns (uint)
   {
       return  balances[msg.sender];
   }

   function BalanceOf(address TokenOwner) public view returns (uint)
   {
       require(TokenOwner == msg.sender,"Only Token Owner Can View His Number Of Tokens");
       return balances[TokenOwner];
   }

   function TokensAllowanceByOwnerToTheSpender(address TokenOwner ,  address spender) public view returns (uint)
   {
       return allowed[TokenOwner][spender];
   }


   function OwnerTransferingTokensToOtherPerson(address OtherPerson , uint Tokens) public returns (bool)
   {
       TokenOwner_1 = msg.sender;
       require(balances[TokenOwner_1]<=Tokens , "First Send Tokens To Your Account First And Then Transfer To Others");
       balances[TokenOwner_1] = sub(balances[TokenOwner_1], Tokens);
       balances[OtherPerson] = add(balances[OtherPerson], Tokens);
       emit Transfer(msg.sender, OtherPerson, Tokens);
       return true;      
   }


   function ApproveTokensToTakeByTheOtherPersonFromTheOwner(address OtherPerson , uint Tokens) public returns (bool)
   {
      TokenOwner_1 = msg.sender;
      require(Tokens<=balances[TokenOwner_1],"Number Of Tokens You Asked Is Not Available You Can Either Reduce The No Of Tokens Or You Can Try Again Later");
      allowed[TokenOwner_1][OtherPerson] = Tokens;
      emit Approval(TokenOwner_1 , OtherPerson , Tokens);
      return true;
   }



   function AfterOwnerApprovalTransferingTokensToOtherPerson(address TokenOwner , address OtherPerson , uint Tokens) public returns (bool)
   {
    // Only in This function msg.sender is the Otherperson because on approval he is taking it directly and the message sender is the Other person
     require(Tokens <= allowed[TokenOwner][OtherPerson] , "You are asking more than allowed Tokens kindly decrease the number" ); 
     require(Tokens<=balances[TokenOwner],"Number Of Tokens You Asked Is Not Available You Can Either Reduce The No Of Tokens Or You Can Try Again Later");    
     balances[TokenOwner] = sub(balances[TokenOwner], Tokens);
     allowed[TokenOwner][msg.sender] = sub(allowed[TokenOwner][msg.sender], Tokens);
     balances[OtherPerson] = add(balances[OtherPerson], Tokens);
     emit Transfer(TokenOwner, msg.sender, Tokens); 
     return true;
   }

   

}
