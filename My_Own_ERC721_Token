// Incomplete and In Process ERC 721

pragma solidity >=0.7.0< 0.9.0; // solidity version

contract SafeMathLibrary // SafeMathLibrary Contract 
{
    
   function add(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function sub(uint a, uint b) public pure returns (uint c) {
        require(b <= a); c = a - b; 
        
    } 
 
}

contract ManikantaERC721Token is  SafeMathLibrary // ManikantaToken contract Inherits All The Functions , Variable from the  SafeMathLibrary contract
{

    string public Token_Name;
    string public Token_Symbol;
    uint8 public decimals; // 18 decimals is the  suggested default, dont change it
    mapping(address => uint) public balances; 
    mapping(address=> mapping (address => bool)) public operatorApprovals;
    mapping(uint256 => address) public tokenApprovals;
    mapping(uint=> address) public OwnersOfParticularToken;
    address TokenOwner;

    event Transfer(address from, address to, uint256 tokenId);
    event Approval(address owner, address approved, uint256 tokenId);
    event ApprovalForAll(address owner, address operator, bool approved);
    event Removal(address Owner , uint256 TokenId);
    event Add(address Owner , uint256 TokenId);

   constructor() {
     Token_Name = "ManikantaToken";
     Token_Symbol= "MTK";
     decimals = 18;
   }

   function MintToken(address Owner , uint256 TokenId ) public returns (string)
   {
       require(OwnerOfToken(TokenId) == address(0)," This Token is already available");
       require(msg.sender == Owner , "The Sender is not Owner");
       OwnersOfParticularToken[TokenId] = Owner;
       balances[Owner]+=1;
       emit Add( Owner ,  TokenId);
       return "You have added  the  new token  to your  account";
   }


   function BurnToken(address Owner , uint256 TokenId  ) public  returns (string)
   {
       require(OwnerOfToken(TokenId) != address(0)," This Token is not available");
       address TokenOwner = OwnerOfToken(TokenId);
       require(TokenOwner == Owner , "This Token is not yours");
       require(msg.sender == Owner , "The Sender is not Owner");
       delete OwnersOfParticularToken[TokenId];
       balances[Owner]-=1;
       emit Removal( Owner ,  TokenId);
       return "You have burned out or removed the token from your account";
   }

   function OwnerOfToken(uint256 TokenId) public view returns (address)
   {
      return  OwnersOfParticularToken[TokenId];
   }

   function TransferFrom(address from , address to , uint256 TokenId) public payable returns (bool)
   {
       require(OwnerOfToken(TokenId) != address(0)," This Token is not available");
       address TokenOwner = OwnerOfToken(TokenId);
       require(TokenOwner == from , "This Token is not yours");
       require(msg.sender == from  , "This Sender is not Owner ");
       balances[from]+=1;
       balances[to]+=1;
       OwnersOfParticularToken[TokenId] = to;
       emit Transfer( from,  to,  tokenId); 
       return true;
   }

   function SafeTransferFrom(address from , address to , uint256 TokenId , byte data) public payable returns (bool)
   {
      

   }

   function Approve(address to, uint256 TokenId) public 
   {
       require(OwnerOfToken(TokenId) != address(0)," This Token is not available");
       tokenApprovals[tokenId] = to;
       emit Approval( OwnerOfToken(TokenId), to , TokenId);
   }

   function GetApproval(uint256 TokenId ) public view returns(address)
   {  
     require(OwnerOfToken(TokenId) != address(0)," This Token is not available");
     return  OwnersOfParticularToken[TokenId];
   }

   function SetApprovalToAll(address owner, address operator, bool approved) public 
   {
      require(owner != operator , "You should approve to others not yourself"); 
      require(msg.sender == Owner , "The Sender is not Owner");
      operatorApprovals[owner][operator] = approved ; 
      emit ApprovalForAll(address owner, address operator, bool approved);
   }

   function IsApprovalToAll( address owner, address operator) public 
   {
        return operatorApprovals[owner][operator];
   }

}
